{"ast":null,"code":"var _jsxFileName = \"/Users/maggy/Workspace/bugly-world/src/components/Minesweeper/Minesweeper.js\",\n  _s = $RefreshSig$();\nimport { collection, query, where, getDocs, doc, getDoc } from \"firebase/firestore\";\nimport { db } from \"../../firebase\";\nimport { useEffect, useState, useRef } from \"react\";\nimport Window from \"../Window\";\nimport Buttons from \"../Buttons\";\nimport \"./minesweeper.css\";\nimport quizData from \"../../assets/data/quizzes.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Minesweeper({\n  level = 1,\n  onCorrect,\n  onClose,\n  onSelfClose,\n  onSuccess,\n  solved,\n  skippedCount,\n  setSkippedCount,\n  parentRef,\n  openQuizWindow\n}) {\n  _s();\n  const mineOrderRef = useRef([]);\n  const [flagIndex, setFlagIndex] = useState(0);\n  const [quizAnswer, setQuizAnswer] = useState(\"\");\n  const [grid, setGrid] = useState([]);\n  const [mineCount, setMineCount] = useState(0);\n  const [wrongAttempts, setWrongAttempts] = useState(0);\n  const [showHint, setShowHint] = useState(false);\n  const [skippedFlags, setSkippedFlags] = useState([]);\n  const [resetKey, setResetKey] = useState(0);\n  const [gameState, setGameState] = useState(\"angry\"); // \"angry\" or \"cool\"\n  const [skippedThisLevel, setSkippedThisLevel] = useState(false);\n  const handleSubmitanswer = async () => {\n    const dirs = [-1, 0, 1];\n    try {\n      const data = quizData[level];\n      if (data) {\n        const correctAnswer = data.answer;\n        if (quizAnswer.trim() === correctAnswer) {\n          setGrid(prev => {\n            const newGrid = prev.map(r => r.map(c => ({\n              ...c\n            })));\n            const [cx, cy] = mineOrderRef.current[flagIndex];\n            newGrid[cx][cy].cleared = true;\n            newGrid[cx][cy].revealed = true;\n            newGrid[cx][cy].flagged = false;\n            dirs.forEach(dx => dirs.forEach(dy => {\n              if (dx || dy) {\n                var _newGrid$nx;\n                const nx = cx + dx,\n                  ny = cy + dy;\n                if ((_newGrid$nx = newGrid[nx]) !== null && _newGrid$nx !== void 0 && _newGrid$nx[ny] && !newGrid[nx][ny].mine) {\n                  newGrid[nx][ny].revealed = true;\n                }\n              }\n            }));\n            const nextIndex = flagIndex + 1;\n            if (nextIndex < mineOrderRef.current.length) {\n              const [nx, ny] = mineOrderRef.current[nextIndex];\n              newGrid[nx][ny].flagged = true;\n              dirs.forEach(dx => dirs.forEach(dy => {\n                if (dx || dy) {\n                  var _newGrid$rx;\n                  const rx = nx + dx,\n                    ry = ny + dy;\n                  if ((_newGrid$rx = newGrid[rx]) !== null && _newGrid$rx !== void 0 && _newGrid$rx[ry] && !newGrid[rx][ry].mine) {\n                    newGrid[rx][ry].revealed = true;\n                  }\n                }\n              }));\n            }\n            return newGrid;\n          });\n          setFlagIndex(i => i + 1);\n          onCorrect && onCorrect();\n        } else {\n          setWrongAttempts(prev => {\n            const next = prev + 1;\n            if (next >= 3) setShowHint(true);\n            return next;\n          });\n          alert(\"틀렸습니다!\");\n        }\n      } else {\n        alert(\"문제 데이터를 찾을 수 없습니다.\");\n      }\n    } catch (error) {\n      console.error(\"정답 확인 중 오류:\", error);\n    } finally {\n      setQuizAnswer(\"\");\n    }\n  };\n  useEffect(() => {\n    const size = level + 2; // grid size increases with level (7 to 13)\n    const mines = level; // mine count equals level for now\n    setMineCount(mines);\n    const newGrid = Array.from({\n      length: size\n    }, () => Array.from({\n      length: size\n    }, () => ({\n      revealed: false,\n      mine: false,\n      flagged: false,\n      cleared: false,\n      adjacentMines: 0\n    })));\n    if (solved) {\n      for (let i = 0; i < size; i++) {\n        for (let j = 0; j < size; j++) {\n          newGrid[i][j].cleared = true;\n          newGrid[i][j].revealed = true;\n        }\n      }\n      setGrid(newGrid);\n      setGameState(\"cool\");\n      return;\n    }\n\n    // Build a fixed random order of mine coords\n    const allCells = [];\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        allCells.push([i, j]);\n      }\n    }\n    const shuffled = allCells.sort(() => 0.5 - Math.random()).slice(0, mines);\n    mineOrderRef.current = shuffled;\n    setFlagIndex(0);\n\n    // Place mines\n    mineOrderRef.current.forEach(([x, y]) => {\n      newGrid[x][y].mine = true;\n    });\n\n    // Calculate adjacent mines\n    const dirs2 = [-1, 0, 1];\n    for (let x = 0; x < size; x++) {\n      for (let y = 0; y < size; y++) {\n        if (newGrid[x][y].mine) continue;\n        let count = 0;\n        dirs2.forEach(dx => {\n          dirs2.forEach(dy => {\n            if (dx === 0 && dy === 0) return;\n            const nx = x + dx;\n            const ny = y + dy;\n            if (nx >= 0 && ny >= 0 && nx < size && ny < size && newGrid[nx][ny].mine) {\n              count++;\n            }\n          });\n        });\n        newGrid[x][y].adjacentMines = count;\n      }\n    }\n\n    // Flag the first mine in order and reveal its neighbors\n    const [fx, fy] = mineOrderRef.current[0];\n    newGrid[fx][fy].flagged = true;\n    const dirs = [-1, 0, 1];\n    dirs.forEach(dx => dirs.forEach(dy => {\n      if (dx || dy) {\n        var _newGrid$nx2;\n        const nx = fx + dx,\n          ny = fy + dy;\n        if ((_newGrid$nx2 = newGrid[nx]) !== null && _newGrid$nx2 !== void 0 && _newGrid$nx2[ny] && !newGrid[nx][ny].mine) {\n          newGrid[nx][ny].revealed = true;\n        }\n      }\n    }));\n    setGrid(newGrid);\n  }, [level, resetKey, solved]);\n  const onCellClick = (row, col) => {\n    setGrid(prevGrid => {\n      const newGrid = prevGrid.map(r => r.map(c => ({\n        ...c\n      })));\n      const clicked = newGrid[row][col];\n      if (clicked.cleared) return newGrid;\n      if (clicked.flagged && !clicked.cleared) {\n        var _quizData$level, _quizData$level2;\n        // Only flagged cells open quiz; no reveal for others\n        openQuizWindow({\n          question: (_quizData$level = quizData[level]) === null || _quizData$level === void 0 ? void 0 : _quizData$level.question,\n          hint: (_quizData$level2 = quizData[level]) === null || _quizData$level2 === void 0 ? void 0 : _quizData$level2.hint,\n          onSubmitAnswer: handleSubmitanswer,\n          onSkip: () => {\n            setWrongAttempts(0);\n            setShowHint(false);\n            setGrid(prevGrid => {\n              const newGrid = prevGrid.map(r => r.map(c => ({\n                ...c\n              })));\n              for (let i = 0; i < newGrid.length; i++) {\n                for (let j = 0; j < newGrid[i].length; j++) {\n                  const cell = newGrid[i][j];\n                  if (cell.flagged && !cell.cleared) {\n                    cell.revealed = true;\n                    cell.flagged = false;\n                    cell.cleared = true;\n                    setSkippedFlags(prev => [...prev, `${i}-${j}`]);\n                    setGameState(\"hmm\");\n                    setSkippedThisLevel(true);\n                    if (setSkippedCount) setSkippedCount(prev => prev + 1);\n                    return newGrid;\n                  }\n                }\n              }\n              return newGrid;\n            });\n          }\n        });\n      }\n      // All other clicks do nothing (don't reveal)\n      return newGrid;\n    });\n  };\n  useEffect(() => {\n    setWrongAttempts(0);\n    setShowHint(false);\n  }, []);\n\n  // switch to cool state when all flagged cells have been cleared (🧪)\n  useEffect(() => {\n    if (grid.length === 0) return;\n    const allFlagsCleared = grid.every(row => row.every(cell => {\n      return !cell.flagged || cell.cleared;\n    }));\n    if (allFlagsCleared && !skippedThisLevel && gameState !== \"hmm\") {\n      setGameState(\"cool\");\n      if (!solved && onSuccess) onSuccess();\n    }\n  }, [grid, gameState, skippedThisLevel]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"minesweeper\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Level: \", level, \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"minesweeper-center-icon\",\n        onClick: () => {\n          if (gameState === \"angry\") {\n            // reset game\n            setResetKey(k => k + 1);\n            setWrongAttempts(0);\n            setShowHint(false);\n          } else if (gameState === \"cool\" || gameState === \"hmm\") {\n            if (onSelfClose) onSelfClose();\n          }\n        },\n        children: gameState === \"angry\" ? \"😡\" : gameState === \"cool\" ? skippedThisLevel ? \"😐\" : \"😎\" : \"😐\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), \" \", \"Mines: \", mineCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"minesweeper-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"minesweeper-grid\",\n        style: {\n          \"--cols\": grid.length\n        },\n        children: grid.map((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `minesweeper-cell \n  ${cell.revealed ? \"revealed\" : \"\"}\n  ${cell.flagged ? \"flagged\" : \"\"}\n  ${cell.revealed && (cell.cleared || cell.adjacentMines > 0) ? \"sunken\" : \"raised\"}`,\n          onClick: () => onCellClick(rowIndex, colIndex),\n          children: cell.revealed ? cell.cleared ? \"🧪\" : cell.mine ? \"💣\" : cell.adjacentMines > 0 ? cell.adjacentMines : \"\" : skippedFlags.includes(`${rowIndex}-${colIndex}`) ? \"❌\" : cell.flagged ? \"\" : \"\"\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 15\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 5\n  }, this);\n}\n_s(Minesweeper, \"8862M1ga0E+NO4n/BAmAcVQV5E4=\");\n_c = Minesweeper;\nexport default Minesweeper;\nvar _c;\n$RefreshReg$(_c, \"Minesweeper\");","map":{"version":3,"names":["collection","query","where","getDocs","doc","getDoc","db","useEffect","useState","useRef","Window","Buttons","quizData","jsxDEV","_jsxDEV","Minesweeper","level","onCorrect","onClose","onSelfClose","onSuccess","solved","skippedCount","setSkippedCount","parentRef","openQuizWindow","_s","mineOrderRef","flagIndex","setFlagIndex","quizAnswer","setQuizAnswer","grid","setGrid","mineCount","setMineCount","wrongAttempts","setWrongAttempts","showHint","setShowHint","skippedFlags","setSkippedFlags","resetKey","setResetKey","gameState","setGameState","skippedThisLevel","setSkippedThisLevel","handleSubmitanswer","dirs","data","correctAnswer","answer","trim","prev","newGrid","map","r","c","cx","cy","current","cleared","revealed","flagged","forEach","dx","dy","_newGrid$nx","nx","ny","mine","nextIndex","length","_newGrid$rx","rx","ry","i","next","alert","error","console","size","mines","Array","from","adjacentMines","j","allCells","push","shuffled","sort","Math","random","slice","x","y","dirs2","count","fx","fy","_newGrid$nx2","onCellClick","row","col","prevGrid","clicked","_quizData$level","_quizData$level2","question","hint","onSubmitAnswer","onSkip","cell","allFlagsCleared","every","className","children","onClick","k","fileName","_jsxFileName","lineNumber","columnNumber","style","rowIndex","colIndex","includes","_c","$RefreshReg$"],"sources":["/Users/maggy/Workspace/bugly-world/src/components/Minesweeper/Minesweeper.js"],"sourcesContent":["import {\n  collection,\n  query,\n  where,\n  getDocs,\n  doc,\n  getDoc,\n} from \"firebase/firestore\";\nimport { db } from \"../../firebase\";\nimport { useEffect, useState, useRef } from \"react\";\nimport Window from \"../Window\";\nimport Buttons from \"../Buttons\";\nimport \"./minesweeper.css\";\nimport quizData from \"../../assets/data/quizzes.json\";\n\nfunction Minesweeper({\n  level = 1,\n  onCorrect,\n  onClose,\n  onSelfClose,\n  onSuccess,\n  solved,\n  skippedCount,\n  setSkippedCount,\n  parentRef,\n  openQuizWindow,\n}) {\n  const mineOrderRef = useRef([]);\n  const [flagIndex, setFlagIndex] = useState(0);\n  const [quizAnswer, setQuizAnswer] = useState(\"\");\n\n  const [grid, setGrid] = useState([]);\n  const [mineCount, setMineCount] = useState(0);\n  const [wrongAttempts, setWrongAttempts] = useState(0);\n  const [showHint, setShowHint] = useState(false);\n  const [skippedFlags, setSkippedFlags] = useState([]);\n  const [resetKey, setResetKey] = useState(0);\n  const [gameState, setGameState] = useState(\"angry\"); // \"angry\" or \"cool\"\n  const [skippedThisLevel, setSkippedThisLevel] = useState(false);\n\n  const handleSubmitanswer = async () => {\n    const dirs = [-1, 0, 1];\n    try {\n      const data = quizData[level];\n      if (data) {\n        const correctAnswer = data.answer;\n\n        if (quizAnswer.trim() === correctAnswer) {\n          setGrid((prev) => {\n            const newGrid = prev.map((r) => r.map((c) => ({ ...c })));\n            const [cx, cy] = mineOrderRef.current[flagIndex];\n            newGrid[cx][cy].cleared = true;\n            newGrid[cx][cy].revealed = true;\n            newGrid[cx][cy].flagged = false;\n\n            dirs.forEach((dx) =>\n              dirs.forEach((dy) => {\n                if (dx || dy) {\n                  const nx = cx + dx,\n                    ny = cy + dy;\n                  if (newGrid[nx]?.[ny] && !newGrid[nx][ny].mine) {\n                    newGrid[nx][ny].revealed = true;\n                  }\n                }\n              })\n            );\n\n            const nextIndex = flagIndex + 1;\n            if (nextIndex < mineOrderRef.current.length) {\n              const [nx, ny] = mineOrderRef.current[nextIndex];\n              newGrid[nx][ny].flagged = true;\n              dirs.forEach((dx) =>\n                dirs.forEach((dy) => {\n                  if (dx || dy) {\n                    const rx = nx + dx,\n                      ry = ny + dy;\n                    if (newGrid[rx]?.[ry] && !newGrid[rx][ry].mine) {\n                      newGrid[rx][ry].revealed = true;\n                    }\n                  }\n                })\n              );\n            }\n            return newGrid;\n          });\n          setFlagIndex((i) => i + 1);\n          onCorrect && onCorrect();\n        } else {\n          setWrongAttempts((prev) => {\n            const next = prev + 1;\n            if (next >= 3) setShowHint(true);\n            return next;\n          });\n          alert(\"틀렸습니다!\");\n        }\n      } else {\n        alert(\"문제 데이터를 찾을 수 없습니다.\");\n      }\n    } catch (error) {\n      console.error(\"정답 확인 중 오류:\", error);\n    } finally {\n      setQuizAnswer(\"\");\n    }\n  };\n\n  useEffect(() => {\n    const size = level + 2; // grid size increases with level (7 to 13)\n    const mines = level; // mine count equals level for now\n    setMineCount(mines);\n\n    const newGrid = Array.from({ length: size }, () =>\n      Array.from({ length: size }, () => ({\n        revealed: false,\n        mine: false,\n        flagged: false,\n        cleared: false,\n        adjacentMines: 0,\n      }))\n    );\n\n    if (solved) {\n      for (let i = 0; i < size; i++) {\n        for (let j = 0; j < size; j++) {\n          newGrid[i][j].cleared = true;\n          newGrid[i][j].revealed = true;\n        }\n      }\n      setGrid(newGrid);\n      setGameState(\"cool\");\n      return;\n    }\n\n    // Build a fixed random order of mine coords\n    const allCells = [];\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        allCells.push([i, j]);\n      }\n    }\n    const shuffled = allCells.sort(() => 0.5 - Math.random()).slice(0, mines);\n    mineOrderRef.current = shuffled;\n    setFlagIndex(0);\n\n    // Place mines\n    mineOrderRef.current.forEach(([x, y]) => {\n      newGrid[x][y].mine = true;\n    });\n\n    // Calculate adjacent mines\n    const dirs2 = [-1, 0, 1];\n    for (let x = 0; x < size; x++) {\n      for (let y = 0; y < size; y++) {\n        if (newGrid[x][y].mine) continue;\n        let count = 0;\n        dirs2.forEach((dx) => {\n          dirs2.forEach((dy) => {\n            if (dx === 0 && dy === 0) return;\n            const nx = x + dx;\n            const ny = y + dy;\n            if (\n              nx >= 0 &&\n              ny >= 0 &&\n              nx < size &&\n              ny < size &&\n              newGrid[nx][ny].mine\n            ) {\n              count++;\n            }\n          });\n        });\n        newGrid[x][y].adjacentMines = count;\n      }\n    }\n\n    // Flag the first mine in order and reveal its neighbors\n    const [fx, fy] = mineOrderRef.current[0];\n    newGrid[fx][fy].flagged = true;\n    const dirs = [-1, 0, 1];\n    dirs.forEach((dx) =>\n      dirs.forEach((dy) => {\n        if (dx || dy) {\n          const nx = fx + dx,\n            ny = fy + dy;\n          if (newGrid[nx]?.[ny] && !newGrid[nx][ny].mine) {\n            newGrid[nx][ny].revealed = true;\n          }\n        }\n      })\n    );\n\n    setGrid(newGrid);\n  }, [level, resetKey, solved]);\n\n  const onCellClick = (row, col) => {\n    setGrid((prevGrid) => {\n      const newGrid = prevGrid.map((r) => r.map((c) => ({ ...c })));\n      const clicked = newGrid[row][col];\n      if (clicked.cleared) return newGrid;\n      if (clicked.flagged && !clicked.cleared) {\n        // Only flagged cells open quiz; no reveal for others\n        openQuizWindow({\n          question: quizData[level]?.question,\n          hint: quizData[level]?.hint,\n          onSubmitAnswer: handleSubmitanswer,\n          onSkip: () => {\n            setWrongAttempts(0);\n            setShowHint(false);\n            setGrid((prevGrid) => {\n              const newGrid = prevGrid.map((r) => r.map((c) => ({ ...c })));\n              for (let i = 0; i < newGrid.length; i++) {\n                for (let j = 0; j < newGrid[i].length; j++) {\n                  const cell = newGrid[i][j];\n                  if (cell.flagged && !cell.cleared) {\n                    cell.revealed = true;\n                    cell.flagged = false;\n                    cell.cleared = true;\n                    setSkippedFlags((prev) => [...prev, `${i}-${j}`]);\n                    setGameState(\"hmm\");\n                    setSkippedThisLevel(true);\n                    if (setSkippedCount) setSkippedCount((prev) => prev + 1);\n                    return newGrid;\n                  }\n                }\n              }\n              return newGrid;\n            });\n          },\n        });\n      }\n      // All other clicks do nothing (don't reveal)\n      return newGrid;\n    });\n  };\n\n  useEffect(() => {\n    setWrongAttempts(0);\n    setShowHint(false);\n  }, []);\n\n  // switch to cool state when all flagged cells have been cleared (🧪)\n  useEffect(() => {\n    if (grid.length === 0) return;\n    const allFlagsCleared = grid.every((row) =>\n      row.every((cell) => {\n        return !cell.flagged || cell.cleared;\n      })\n    );\n    if (allFlagsCleared && !skippedThisLevel && gameState !== \"hmm\") {\n      setGameState(\"cool\");\n      if (!solved && onSuccess) onSuccess();\n    }\n  }, [grid, gameState, skippedThisLevel]);\n\n  return (\n    <div className=\"minesweeper\">\n      <p>\n        Level: {level}{\" \"}\n        <div\n          className=\"minesweeper-center-icon\"\n          onClick={() => {\n            if (gameState === \"angry\") {\n              // reset game\n              setResetKey((k) => k + 1);\n              setWrongAttempts(0);\n              setShowHint(false);\n            } else if (gameState === \"cool\" || gameState === \"hmm\") {\n              if (onSelfClose) onSelfClose();\n            }\n          }}\n        >\n          {gameState === \"angry\"\n            ? \"😡\"\n            : gameState === \"cool\"\n            ? skippedThisLevel\n              ? \"😐\"\n              : \"😎\"\n            : \"😐\"}\n        </div>{\" \"}\n        Mines: {mineCount}\n      </p>\n      <div className=\"minesweeper-wrapper\">\n        <div className=\"minesweeper-grid\" style={{ \"--cols\": grid.length }}>\n          {grid.map((row, rowIndex) =>\n            row.map((cell, colIndex) => (\n              <div\n                key={`${rowIndex}-${colIndex}`}\n                className={`minesweeper-cell \n  ${cell.revealed ? \"revealed\" : \"\"}\n  ${cell.flagged ? \"flagged\" : \"\"}\n  ${\n    cell.revealed && (cell.cleared || cell.adjacentMines > 0)\n      ? \"sunken\"\n      : \"raised\"\n  }`}\n                onClick={() => onCellClick(rowIndex, colIndex)}\n              >\n                {cell.revealed\n                  ? cell.cleared\n                    ? \"🧪\"\n                    : cell.mine\n                    ? \"💣\"\n                    : cell.adjacentMines > 0\n                    ? cell.adjacentMines\n                    : \"\"\n                  : skippedFlags.includes(`${rowIndex}-${colIndex}`)\n                  ? \"❌\"\n                  : cell.flagged\n                  ? \"\"\n                  : \"\"}\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Minesweeper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}