{"ast":null,"code":"var _jsxFileName = \"/Users/maggy/Workspace/bugly-world/src/components/Minesweeper/Minesweeper.js\",\n  _s = $RefreshSig$();\nimport { collection, query, where, getDocs, doc, getDoc } from \"firebase/firestore\";\nimport { db } from \"../../firebase\";\nimport { useEffect, useState, useRef } from \"react\";\nimport Window from \"../Window\";\nimport Buttons from \"../Buttons\";\nimport \"./minesweeper.css\";\nimport quizData from \"../../assets/data/quizzes.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Minesweeper({\n  level = 1,\n  onCorrect,\n  onClose,\n  onSelfClose,\n  onSuccess,\n  solved,\n  skippedCount,\n  setSkippedCount,\n  parentRef,\n  onFlagClick,\n  solvedFlags = []\n}) {\n  _s();\n  var _quizData$level2;\n  const mineOrderRef = useRef([]);\n  const appliedSolvedFlagsRef = useRef([]);\n  const [flagIndex, setFlagIndex] = useState(0);\n  const [grid, setGrid] = useState([]);\n  const [mineCount, setMineCount] = useState(0);\n  const [skippedFlags, setSkippedFlags] = useState([]);\n  const [resetKey, setResetKey] = useState(0);\n  const [gameState, setGameState] = useState(\"angry\"); // \"angry\" or \"cool\"\n  const [skippedThisLevel, setSkippedThisLevel] = useState(false);\n  const [quizOpen, setQuizOpen] = useState(false);\n  const [quizAnswer, setQuizAnswer] = useState(\"\");\n  const [flaggedCell, setFlaggedCell] = useState(null); // Store the flagged cell information\n\n  useEffect(() => {\n    const size = level + 2; // grid size increases with level (7 to 13)\n    const mines = level; // mine count equals level for now\n    setMineCount(mines);\n    const newGrid = Array.from({\n      length: size\n    }, () => Array.from({\n      length: size\n    }, () => ({\n      revealed: false,\n      mine: false,\n      flagged: false,\n      cleared: false,\n      adjacentMines: 0\n    })));\n    if (solved) {\n      for (let i = 0; i < size; i++) {\n        for (let j = 0; j < size; j++) {\n          newGrid[i][j].cleared = true;\n          newGrid[i][j].revealed = true;\n        }\n      }\n      setGrid(newGrid);\n      setGameState(\"cool\");\n      return;\n    }\n\n    // Build a fixed random order of mine coords\n    const allCells = [];\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        allCells.push([i, j]);\n      }\n    }\n    const shuffled = allCells.sort(() => 0.5 - Math.random()).slice(0, mines);\n    mineOrderRef.current = shuffled;\n    setFlagIndex(0);\n\n    // Place mines\n    mineOrderRef.current.forEach(([x, y]) => {\n      newGrid[x][y].mine = true;\n    });\n\n    // Calculate adjacent mines\n    const dirs2 = [-1, 0, 1];\n    for (let x = 0; x < size; x++) {\n      for (let y = 0; y < size; y++) {\n        if (newGrid[x][y].mine) continue;\n        let count = 0;\n        dirs2.forEach(dx => {\n          dirs2.forEach(dy => {\n            if (dx === 0 && dy === 0) return;\n            const nx = x + dx;\n            const ny = y + dy;\n            if (nx >= 0 && ny >= 0 && nx < size && ny < size && newGrid[nx][ny].mine) {\n              count++;\n            }\n          });\n        });\n        newGrid[x][y].adjacentMines = count;\n      }\n    }\n\n    // Flag the first mine in order and reveal its neighbors\n    const [fx, fy] = mineOrderRef.current[0];\n    newGrid[fx][fy].flagged = true;\n    const dirs = [-1, 0, 1];\n    dirs.forEach(dx => dirs.forEach(dy => {\n      if (dx || dy) {\n        var _newGrid$nx;\n        const nx = fx + dx,\n          ny = fy + dy;\n        if ((_newGrid$nx = newGrid[nx]) !== null && _newGrid$nx !== void 0 && _newGrid$nx[ny] && !newGrid[nx][ny].mine) {\n          newGrid[nx][ny].revealed = true;\n        }\n      }\n    }));\n    setGrid(newGrid);\n  }, [level, resetKey, solved]);\n  const onCellClick = (row, col) => {\n    const clicked = grid[row][col];\n    if (clicked.flagged) {\n      // Open quiz if the cell is flagged\n      setFlaggedCell({\n        row,\n        col\n      });\n      setQuizOpen(true);\n    }\n  };\n  const handleSubmitAnswer = () => {\n    var _quizData$level;\n    const correctAnswer = (_quizData$level = quizData[level]) === null || _quizData$level === void 0 ? void 0 : _quizData$level.answer;\n    if (quizAnswer.trim() === correctAnswer) {\n      // Reveal the flagged cell if correct\n      setGrid(prevGrid => {\n        const newGrid = prevGrid.map(r => r.map(c => ({\n          ...c\n        })));\n        newGrid[flaggedCell.row][flaggedCell.col].revealed = true;\n        newGrid[flaggedCell.row][flaggedCell.col].cleared = true;\n        return newGrid;\n      });\n      onCorrect && onCorrect();\n      setQuizOpen(false);\n      setQuizAnswer(\"\");\n      setFlaggedCell(null);\n    } else {\n      alert(\"Incorrect Answer\");\n    }\n  };\n\n  // switch to cool state when all flagged cells have been cleared (🧪)\n  useEffect(() => {\n    if (grid.length === 0) return;\n    const allFlagsCleared = grid.every(row => row.every(cell => {\n      return !cell.flagged || cell.cleared;\n    }));\n    if (allFlagsCleared && !skippedThisLevel && gameState !== \"hmm\") {\n      setGameState(\"cool\");\n      if (!solved && onSuccess) onSuccess();\n    }\n  }, [grid, gameState, skippedThisLevel]);\n  useEffect(() => {\n    console.log(\"✅ Minesweeper received new solvedFlags:\", solvedFlags);\n  }, [solvedFlags]);\n\n  // Reveal and clear solved flag cells in the grid when solvedFlags updates\n  useEffect(() => {\n    console.log(\"Minesweeper useEffect for solvedFlags runs\");\n    if (!grid.length || !solvedFlags.length) return;\n    const newFlags = solvedFlags.filter(f => !appliedSolvedFlagsRef.current.some(prev => {\n      var _prev$cell, _f$cell, _prev$cell2, _f$cell2;\n      return prev.level === f.level && ((_prev$cell = prev.cell) === null || _prev$cell === void 0 ? void 0 : _prev$cell.row) === ((_f$cell = f.cell) === null || _f$cell === void 0 ? void 0 : _f$cell.row) && ((_prev$cell2 = prev.cell) === null || _prev$cell2 === void 0 ? void 0 : _prev$cell2.col) === ((_f$cell2 = f.cell) === null || _f$cell2 === void 0 ? void 0 : _f$cell2.col);\n    }));\n    console.log(\"🧪 [useEffect] 새로 들어온 solvedFlags:\", newFlags);\n    if (newFlags.length === 0) return;\n    setGrid(prevGrid => {\n      const newGrid = prevGrid.map(row => row.map(cell => ({\n        ...cell\n      })));\n      newFlags.forEach(f => {\n        const {\n          row,\n          col\n        } = f.cell;\n        if (typeof row === \"number\" && typeof col === \"number\" && newGrid[row] && newGrid[row][col]) {\n          newGrid[row][col].revealed = true;\n          newGrid[row][col].cleared = true;\n          console.log(`🧪 셀 [${row}, ${col}] revealed/cleared 설정됨`, newGrid[row][col]);\n        }\n      });\n      return newGrid;\n    });\n    appliedSolvedFlagsRef.current = [...appliedSolvedFlagsRef.current, ...newFlags];\n  }, [solvedFlags, grid.length, level]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"minesweeper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"minesweeper-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Level: \", level, \" Mines: \", mineCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"minesweeper-center-icon\",\n        onClick: () => {\n          if (gameState === \"angry\") {\n            setResetKey(k => k + 1);\n          } else if (gameState === \"cool\" || gameState === \"hmm\") {\n            if (onSelfClose) onSelfClose();\n          }\n        },\n        children: gameState === \"angry\" ? \"😡\" : gameState === \"cool\" ? skippedThisLevel ? \"😐\" : \"😎\" : \"😐\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"minesweeper-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"minesweeper-grid\",\n        style: {\n          \"--cols\": grid.length\n        },\n        children: grid.map((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `minesweeper-cell \n  ${cell.revealed ? \"revealed\" : \"\"}\n  ${cell.flagged ? \"flagged\" : \"\"}\n  ${cell.revealed && (cell.cleared || cell.adjacentMines > 0) ? \"sunken\" : \"raised\"}`,\n          onClick: () => onCellClick(rowIndex, colIndex),\n          children: (() => {\n            const isSolvedFlag = solvedFlags.some(f => f.level === level && f.cell && f.cell.row === rowIndex && f.cell.col === colIndex);\n            return cell.revealed ? cell.cleared ? \"🧪\" : cell.mine ? \"💣\" : cell.adjacentMines > 0 ? cell.adjacentMines : \"\" : skippedFlags.includes(`${rowIndex}-${colIndex}`) ? \"❌\" : isSolvedFlag ? \"🧪\" : cell.flagged ? \"🚩\" : \"\";\n          })()\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 15\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), quizOpen && /*#__PURE__*/_jsxDEV(Window, {\n      onClose: () => setQuizOpen(false),\n      title: \"Quiz\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-question\",\n        children: (_quizData$level2 = quizData[level]) === null || _quizData$level2 === void 0 ? void 0 : _quizData$level2.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: quizAnswer,\n        onChange: e => setQuizAnswer(e.target.value),\n        className: \"quiz-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Buttons, {\n        buttons: [{\n          label: \"Submit\",\n          onClick: handleSubmitAnswer,\n          primary: true\n        }, {\n          label: \"Cancel\",\n          onClick: () => setQuizOpen(false)\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 5\n  }, this);\n}\n_s(Minesweeper, \"msNqqV4UTSAQpnBOH6ol/57ChyU=\");\n_c = Minesweeper;\nexport default Minesweeper;\nvar _c;\n$RefreshReg$(_c, \"Minesweeper\");","map":{"version":3,"names":["collection","query","where","getDocs","doc","getDoc","db","useEffect","useState","useRef","Window","Buttons","quizData","jsxDEV","_jsxDEV","Minesweeper","level","onCorrect","onClose","onSelfClose","onSuccess","solved","skippedCount","setSkippedCount","parentRef","onFlagClick","solvedFlags","_s","_quizData$level2","mineOrderRef","appliedSolvedFlagsRef","flagIndex","setFlagIndex","grid","setGrid","mineCount","setMineCount","skippedFlags","setSkippedFlags","resetKey","setResetKey","gameState","setGameState","skippedThisLevel","setSkippedThisLevel","quizOpen","setQuizOpen","quizAnswer","setQuizAnswer","flaggedCell","setFlaggedCell","size","mines","newGrid","Array","from","length","revealed","mine","flagged","cleared","adjacentMines","i","j","allCells","push","shuffled","sort","Math","random","slice","current","forEach","x","y","dirs2","count","dx","dy","nx","ny","fx","fy","dirs","_newGrid$nx","onCellClick","row","col","clicked","handleSubmitAnswer","_quizData$level","correctAnswer","answer","trim","prevGrid","map","r","c","alert","allFlagsCleared","every","cell","console","log","newFlags","filter","f","some","prev","_prev$cell","_f$cell","_prev$cell2","_f$cell2","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","k","style","rowIndex","colIndex","isSolvedFlag","includes","title","question","type","value","onChange","e","target","buttons","label","primary","_c","$RefreshReg$"],"sources":["/Users/maggy/Workspace/bugly-world/src/components/Minesweeper/Minesweeper.js"],"sourcesContent":["import {\n  collection,\n  query,\n  where,\n  getDocs,\n  doc,\n  getDoc,\n} from \"firebase/firestore\";\nimport { db } from \"../../firebase\";\nimport { useEffect, useState, useRef } from \"react\";\nimport Window from \"../Window\";\nimport Buttons from \"../Buttons\";\nimport \"./minesweeper.css\";\nimport quizData from \"../../assets/data/quizzes.json\";\n\nfunction Minesweeper({\n  level = 1,\n  onCorrect,\n  onClose,\n  onSelfClose,\n  onSuccess,\n  solved,\n  skippedCount,\n  setSkippedCount,\n  parentRef,\n  onFlagClick,\n  solvedFlags = [],\n}) {\n  const mineOrderRef = useRef([]);\n  const appliedSolvedFlagsRef = useRef([]);\n  const [flagIndex, setFlagIndex] = useState(0);\n\n  const [grid, setGrid] = useState([]);\n  const [mineCount, setMineCount] = useState(0);\n  const [skippedFlags, setSkippedFlags] = useState([]);\n  const [resetKey, setResetKey] = useState(0);\n  const [gameState, setGameState] = useState(\"angry\"); // \"angry\" or \"cool\"\n  const [skippedThisLevel, setSkippedThisLevel] = useState(false);\n\n  const [quizOpen, setQuizOpen] = useState(false);\n  const [quizAnswer, setQuizAnswer] = useState(\"\");\n  const [flaggedCell, setFlaggedCell] = useState(null); // Store the flagged cell information\n\n  useEffect(() => {\n    const size = level + 2; // grid size increases with level (7 to 13)\n    const mines = level; // mine count equals level for now\n    setMineCount(mines);\n\n    const newGrid = Array.from({ length: size }, () =>\n      Array.from({ length: size }, () => ({\n        revealed: false,\n        mine: false,\n        flagged: false,\n        cleared: false,\n        adjacentMines: 0,\n      }))\n    );\n\n    if (solved) {\n      for (let i = 0; i < size; i++) {\n        for (let j = 0; j < size; j++) {\n          newGrid[i][j].cleared = true;\n          newGrid[i][j].revealed = true;\n        }\n      }\n      setGrid(newGrid);\n      setGameState(\"cool\");\n      return;\n    }\n\n    // Build a fixed random order of mine coords\n    const allCells = [];\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        allCells.push([i, j]);\n      }\n    }\n    const shuffled = allCells.sort(() => 0.5 - Math.random()).slice(0, mines);\n    mineOrderRef.current = shuffled;\n    setFlagIndex(0);\n\n    // Place mines\n    mineOrderRef.current.forEach(([x, y]) => {\n      newGrid[x][y].mine = true;\n    });\n\n    // Calculate adjacent mines\n    const dirs2 = [-1, 0, 1];\n    for (let x = 0; x < size; x++) {\n      for (let y = 0; y < size; y++) {\n        if (newGrid[x][y].mine) continue;\n        let count = 0;\n        dirs2.forEach((dx) => {\n          dirs2.forEach((dy) => {\n            if (dx === 0 && dy === 0) return;\n            const nx = x + dx;\n            const ny = y + dy;\n            if (\n              nx >= 0 &&\n              ny >= 0 &&\n              nx < size &&\n              ny < size &&\n              newGrid[nx][ny].mine\n            ) {\n              count++;\n            }\n          });\n        });\n        newGrid[x][y].adjacentMines = count;\n      }\n    }\n\n    // Flag the first mine in order and reveal its neighbors\n    const [fx, fy] = mineOrderRef.current[0];\n    newGrid[fx][fy].flagged = true;\n    const dirs = [-1, 0, 1];\n    dirs.forEach((dx) =>\n      dirs.forEach((dy) => {\n        if (dx || dy) {\n          const nx = fx + dx,\n            ny = fy + dy;\n          if (newGrid[nx]?.[ny] && !newGrid[nx][ny].mine) {\n            newGrid[nx][ny].revealed = true;\n          }\n        }\n      })\n    );\n\n    setGrid(newGrid);\n  }, [level, resetKey, solved]);\n\n  const onCellClick = (row, col) => {\n    const clicked = grid[row][col];\n    if (clicked.flagged) {\n      // Open quiz if the cell is flagged\n      setFlaggedCell({ row, col });\n      setQuizOpen(true);\n    }\n  };\n\n  const handleSubmitAnswer = () => {\n    const correctAnswer = quizData[level]?.answer;\n    if (quizAnswer.trim() === correctAnswer) {\n      // Reveal the flagged cell if correct\n      setGrid((prevGrid) => {\n        const newGrid = prevGrid.map((r) => r.map((c) => ({ ...c })));\n        newGrid[flaggedCell.row][flaggedCell.col].revealed = true;\n        newGrid[flaggedCell.row][flaggedCell.col].cleared = true;\n        return newGrid;\n      });\n      onCorrect && onCorrect();\n      setQuizOpen(false);\n      setQuizAnswer(\"\");\n      setFlaggedCell(null);\n    } else {\n      alert(\"Incorrect Answer\");\n    }\n  };\n\n  // switch to cool state when all flagged cells have been cleared (🧪)\n  useEffect(() => {\n    if (grid.length === 0) return;\n    const allFlagsCleared = grid.every((row) =>\n      row.every((cell) => {\n        return !cell.flagged || cell.cleared;\n      })\n    );\n    if (allFlagsCleared && !skippedThisLevel && gameState !== \"hmm\") {\n      setGameState(\"cool\");\n      if (!solved && onSuccess) onSuccess();\n    }\n  }, [grid, gameState, skippedThisLevel]);\n\n  useEffect(() => {\n    console.log(\"✅ Minesweeper received new solvedFlags:\", solvedFlags);\n  }, [solvedFlags]);\n\n  // Reveal and clear solved flag cells in the grid when solvedFlags updates\n  useEffect(() => {\n    console.log(\"Minesweeper useEffect for solvedFlags runs\");\n    if (!grid.length || !solvedFlags.length) return;\n\n    const newFlags = solvedFlags.filter(\n      (f) =>\n        !appliedSolvedFlagsRef.current.some(\n          (prev) =>\n            prev.level === f.level &&\n            prev.cell?.row === f.cell?.row &&\n            prev.cell?.col === f.cell?.col\n        )\n    );\n\n    console.log(\"🧪 [useEffect] 새로 들어온 solvedFlags:\", newFlags);\n\n    if (newFlags.length === 0) return;\n\n    setGrid((prevGrid) => {\n      const newGrid = prevGrid.map((row) => row.map((cell) => ({ ...cell })));\n\n      newFlags.forEach((f) => {\n        const { row, col } = f.cell;\n        if (\n          typeof row === \"number\" &&\n          typeof col === \"number\" &&\n          newGrid[row] &&\n          newGrid[row][col]\n        ) {\n          newGrid[row][col].revealed = true;\n          newGrid[row][col].cleared = true;\n          console.log(\n            `🧪 셀 [${row}, ${col}] revealed/cleared 설정됨`,\n            newGrid[row][col]\n          );\n        }\n      });\n\n      return newGrid;\n    });\n\n    appliedSolvedFlagsRef.current = [\n      ...appliedSolvedFlagsRef.current,\n      ...newFlags,\n    ];\n  }, [solvedFlags, grid.length, level]);\n\n  return (\n    <div className=\"minesweeper\">\n      <div className=\"minesweeper-header\">\n        <p>\n          Level: {level} Mines: {mineCount}\n        </p>\n        <div\n          className=\"minesweeper-center-icon\"\n          onClick={() => {\n            if (gameState === \"angry\") {\n              setResetKey((k) => k + 1);\n            } else if (gameState === \"cool\" || gameState === \"hmm\") {\n              if (onSelfClose) onSelfClose();\n            }\n          }}\n        >\n          {gameState === \"angry\"\n            ? \"😡\"\n            : gameState === \"cool\"\n            ? skippedThisLevel\n              ? \"😐\"\n              : \"😎\"\n            : \"😐\"}\n        </div>\n      </div>\n      <div className=\"minesweeper-wrapper\">\n        <div className=\"minesweeper-grid\" style={{ \"--cols\": grid.length }}>\n          {grid.map((row, rowIndex) =>\n            row.map((cell, colIndex) => (\n              <div\n                key={`${rowIndex}-${colIndex}`}\n                className={`minesweeper-cell \n  ${cell.revealed ? \"revealed\" : \"\"}\n  ${cell.flagged ? \"flagged\" : \"\"}\n  ${\n    cell.revealed && (cell.cleared || cell.adjacentMines > 0)\n      ? \"sunken\"\n      : \"raised\"\n  }`}\n                onClick={() => onCellClick(rowIndex, colIndex)}\n              >\n                {(() => {\n                  const isSolvedFlag = solvedFlags.some(\n                    (f) =>\n                      f.level === level &&\n                      f.cell &&\n                      f.cell.row === rowIndex &&\n                      f.cell.col === colIndex\n                  );\n                  return cell.revealed\n                    ? cell.cleared\n                      ? \"🧪\"\n                      : cell.mine\n                      ? \"💣\"\n                      : cell.adjacentMines > 0\n                      ? cell.adjacentMines\n                      : \"\"\n                    : skippedFlags.includes(`${rowIndex}-${colIndex}`)\n                    ? \"❌\"\n                    : isSolvedFlag\n                    ? \"🧪\"\n                    : cell.flagged\n                    ? \"🚩\"\n                    : \"\";\n                })()}\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n      {quizOpen && (\n        <Window onClose={() => setQuizOpen(false)} title=\"Quiz\">\n          <div className=\"quiz-question\">{quizData[level]?.question}</div>\n          <input\n            type=\"text\"\n            value={quizAnswer}\n            onChange={(e) => setQuizAnswer(e.target.value)}\n            className=\"quiz-input\"\n          />\n          <Buttons\n            buttons={[\n              {\n                label: \"Submit\",\n                onClick: handleSubmitAnswer,\n                primary: true,\n              },\n              {\n                label: \"Cancel\",\n                onClick: () => setQuizOpen(false),\n              },\n            ]}\n          />\n        </Window>\n      )}\n    </div>\n  );\n}\n\nexport default Minesweeper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}