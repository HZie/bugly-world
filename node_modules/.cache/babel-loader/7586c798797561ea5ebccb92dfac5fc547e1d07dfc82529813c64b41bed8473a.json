{"ast":null,"code":"var _jsxFileName = \"/Users/maggy/Workspace/bugly-world/src/components/Minesweeper/Minesweeper.js\",\n  _s = $RefreshSig$();\nimport { collection, query, where, getDocs, doc, getDoc } from \"firebase/firestore\";\nimport { db } from \"../../firebase\";\nimport { useEffect, useState } from \"react\";\nimport Window from \"../Window\";\nimport Buttons from \"../Buttons\";\nimport \"./minesweeper.css\";\nimport quizData from \"../../assets/data/quizzes.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Minesweeper({\n  level = 1,\n  onCorrect\n}) {\n  _s();\n  var _quizData$level, _quizData$level2;\n  const [grid, setGrid] = useState([]);\n  const [mineCount, setMineCount] = useState(0);\n  const [quizOpen, setQuizOpen] = useState(false);\n  const [quizAnswer, setQuizAnswer] = useState(\"\");\n  const [wrongAttempts, setWrongAttempts] = useState(0);\n  const [showHint, setShowHint] = useState(false);\n  const [skippedFlags, setSkippedFlags] = useState([]);\n  const handleSubmitanswer = async () => {\n    try {\n      const data = quizData[level];\n      if (data) {\n        const correctAnswer = data.answer;\n        if (quizAnswer.trim() === correctAnswer) {\n          console.log(\"정답!\");\n          onCorrect && onCorrect();\n          setQuizOpen(false);\n        } else {\n          setWrongAttempts(prev => {\n            const next = prev + 1;\n            if (next >= 3) setShowHint(true);\n            return next;\n          });\n          alert(\"틀렸습니다!\");\n        }\n      } else {\n        alert(\"문제 데이터를 찾을 수 없습니다.\");\n      }\n    } catch (error) {\n      console.error(\"정답 확인 중 오류:\", error);\n    } finally {\n      setQuizAnswer(\"\");\n    }\n  };\n  useEffect(() => {\n    const size = 5 + level * 2; // grid size increases with level (7 to 13)\n    const mines = level; // mine count equals level for now\n    setMineCount(mines);\n    const newGrid = Array.from({\n      length: size\n    }, () => Array.from({\n      length: size\n    }, () => ({\n      revealed: false,\n      mine: false,\n      flagged: false,\n      cleared: false,\n      adjacentMines: 0\n    })));\n\n    // Place mines randomly with one flagged\n    const allCells = [];\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        allCells.push([i, j]);\n      }\n    }\n    const shuffled = allCells.sort(() => 0.5 - Math.random());\n    for (let i = 0; i < mines; i++) {\n      const [x, y] = shuffled[i];\n      newGrid[x][y].mine = true;\n    }\n\n    // Randomly select one mine to be flagged\n    const [fx, fy] = shuffled[Math.floor(Math.random() * mines)];\n    newGrid[fx][fy].flagged = true;\n\n    // Calculate adjacent mines\n    const dirs = [-1, 0, 1];\n    for (let x = 0; x < size; x++) {\n      for (let y = 0; y < size; y++) {\n        if (newGrid[x][y].mine) continue;\n        let count = 0;\n        dirs.forEach(dx => {\n          dirs.forEach(dy => {\n            if (dx === 0 && dy === 0) return;\n            const nx = x + dx;\n            const ny = y + dy;\n            if (nx >= 0 && ny >= 0 && nx < size && ny < size && newGrid[nx][ny].mine) {\n              count++;\n            }\n          });\n        });\n        newGrid[x][y].adjacentMines = count;\n      }\n    }\n    setGrid(newGrid);\n  }, [level]);\n  const onCellClick = (row, col) => {\n    setGrid(prevGrid => {\n      const newGrid = prevGrid.map(r => r.map(c => ({\n        ...c\n      })));\n      const clicked = newGrid[row][col];\n      if (clicked.cleared) return newGrid;\n      if (clicked.flagged) {\n        clicked.revealed = true;\n        clicked.flagged = false;\n        clicked.cleared = true;\n        setQuizOpen(true); // Open quiz window\n        // Reveal numbers around the flagged cell\n        const dirs = [-1, 0, 1];\n        dirs.forEach(dx => {\n          dirs.forEach(dy => {\n            if (dx === 0 && dy === 0) return;\n            const nx = row + dx;\n            const ny = col + dy;\n            if (nx >= 0 && ny >= 0 && nx < newGrid.length && ny < newGrid[0].length && !newGrid[nx][ny].mine) {\n              newGrid[nx][ny].revealed = true;\n            }\n          });\n        });\n\n        // Activate next flagged mine\n        for (let i = 0; i < newGrid.length; i++) {\n          for (let j = 0; j < newGrid[i].length; j++) {\n            if (newGrid[i][j].mine && !newGrid[i][j].cleared && !newGrid[i][j].flagged) {\n              newGrid[i][j].flagged = true;\n              return newGrid;\n            }\n          }\n        }\n      } else if (!clicked.mine) {\n        clicked.revealed = true;\n      }\n      return newGrid;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"minesweeper\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Level: \", level, \", Mines: \", mineCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"minesweeper-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"minesweeper-grid\",\n        style: {\n          gridTemplateColumns: `repeat(${grid.length}, 1fr)`\n        },\n        children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"minesweeper-row\",\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `minesweeper-cell ${cell.revealed ? \"revealed\" : \"\"} ${cell.flagged ? \"flagged\" : \"\"}`,\n            onClick: () => onCellClick(rowIndex, colIndex),\n            children: cell.revealed ? cell.cleared ? \"🧪\" : cell.mine ? \"💣\" : cell.adjacentMines > 0 ? cell.adjacentMines : \"\" : skippedFlags.includes(`${rowIndex}-${colIndex}`) ? \"❌\" : cell.flagged ? \"🔻\" : \"\"\n          }, `${rowIndex}-${colIndex}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), quizOpen && /*#__PURE__*/_jsxDEV(Window, {\n      title: \"\\uD034\\uC988\",\n      onClose: () => setQuizOpen(false),\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: (_quizData$level = quizData[level]) === null || _quizData$level === void 0 ? void 0 : _quizData$level.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"\\uC815\\uB2F5\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n        value: quizAnswer,\n        onChange: e => setQuizAnswer(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this), showHint && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"hint\",\n        children: [\"\\uD78C\\uD2B8: \", (_quizData$level2 = quizData[level]) === null || _quizData$level2 === void 0 ? void 0 : _quizData$level2.hint]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(Buttons, {\n        onClick: handleSubmitanswer,\n        children: \"\\uC81C\\uCD9C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this), wrongAttempts >= 3 && /*#__PURE__*/_jsxDEV(Buttons, {\n        onClick: () => {\n          setQuizOpen(false);\n          setGrid(prevGrid => {\n            const newGrid = prevGrid.map(r => r.map(c => ({\n              ...c\n            })));\n            for (let i = 0; i < newGrid.length; i++) {\n              for (let j = 0; j < newGrid[i].length; j++) {\n                const cell = newGrid[i][j];\n                if (cell.flagged && !cell.cleared) {\n                  cell.revealed = true;\n                  cell.flagged = false;\n                  cell.cleared = true;\n                  setSkippedFlags(prev => [...prev, `${i}-${j}`]);\n                  return newGrid;\n                }\n              }\n            }\n            return newGrid;\n          });\n        },\n        children: \"\\uD034\\uC988 \\uB118\\uC5B4\\uAC00\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n}\n_s(Minesweeper, \"o4Nxn0j0XNt9GyGkewZGjYCYU4I=\");\n_c = Minesweeper;\nexport default Minesweeper;\nvar _c;\n$RefreshReg$(_c, \"Minesweeper\");","map":{"version":3,"names":["collection","query","where","getDocs","doc","getDoc","db","useEffect","useState","Window","Buttons","quizData","jsxDEV","_jsxDEV","Minesweeper","level","onCorrect","_s","_quizData$level","_quizData$level2","grid","setGrid","mineCount","setMineCount","quizOpen","setQuizOpen","quizAnswer","setQuizAnswer","wrongAttempts","setWrongAttempts","showHint","setShowHint","skippedFlags","setSkippedFlags","handleSubmitanswer","data","correctAnswer","answer","trim","console","log","prev","next","alert","error","size","mines","newGrid","Array","from","length","revealed","mine","flagged","cleared","adjacentMines","allCells","i","j","push","shuffled","sort","Math","random","x","y","fx","fy","floor","dirs","count","forEach","dx","dy","nx","ny","onCellClick","row","col","prevGrid","map","r","c","clicked","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","gridTemplateColumns","rowIndex","cell","colIndex","onClick","includes","title","onClose","question","type","placeholder","value","onChange","e","target","hint","_c","$RefreshReg$"],"sources":["/Users/maggy/Workspace/bugly-world/src/components/Minesweeper/Minesweeper.js"],"sourcesContent":["import {\n  collection,\n  query,\n  where,\n  getDocs,\n  doc,\n  getDoc,\n} from \"firebase/firestore\";\nimport { db } from \"../../firebase\";\nimport { useEffect, useState } from \"react\";\nimport Window from \"../Window\";\nimport Buttons from \"../Buttons\";\nimport \"./minesweeper.css\";\nimport quizData from \"../../assets/data/quizzes.json\";\n\nfunction Minesweeper({ level = 1, onCorrect }) {\n  const [grid, setGrid] = useState([]);\n  const [mineCount, setMineCount] = useState(0);\n  const [quizOpen, setQuizOpen] = useState(false);\n  const [quizAnswer, setQuizAnswer] = useState(\"\");\n  const [wrongAttempts, setWrongAttempts] = useState(0);\n  const [showHint, setShowHint] = useState(false);\n  const [skippedFlags, setSkippedFlags] = useState([]);\n\n  const handleSubmitanswer = async () => {\n    try {\n      const data = quizData[level];\n      if (data) {\n        const correctAnswer = data.answer;\n\n        if (quizAnswer.trim() === correctAnswer) {\n          console.log(\"정답!\");\n          onCorrect && onCorrect();\n          setQuizOpen(false);\n        } else {\n          setWrongAttempts((prev) => {\n            const next = prev + 1;\n            if (next >= 3) setShowHint(true);\n            return next;\n          });\n          alert(\"틀렸습니다!\");\n        }\n      } else {\n        alert(\"문제 데이터를 찾을 수 없습니다.\");\n      }\n    } catch (error) {\n      console.error(\"정답 확인 중 오류:\", error);\n    } finally {\n      setQuizAnswer(\"\");\n    }\n  };\n\n  useEffect(() => {\n    const size = 5 + level * 2; // grid size increases with level (7 to 13)\n    const mines = level; // mine count equals level for now\n    setMineCount(mines);\n\n    const newGrid = Array.from({ length: size }, () =>\n      Array.from({ length: size }, () => ({\n        revealed: false,\n        mine: false,\n        flagged: false,\n        cleared: false,\n        adjacentMines: 0,\n      }))\n    );\n\n    // Place mines randomly with one flagged\n    const allCells = [];\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        allCells.push([i, j]);\n      }\n    }\n\n    const shuffled = allCells.sort(() => 0.5 - Math.random());\n    for (let i = 0; i < mines; i++) {\n      const [x, y] = shuffled[i];\n      newGrid[x][y].mine = true;\n    }\n\n    // Randomly select one mine to be flagged\n    const [fx, fy] = shuffled[Math.floor(Math.random() * mines)];\n    newGrid[fx][fy].flagged = true;\n\n    // Calculate adjacent mines\n    const dirs = [-1, 0, 1];\n    for (let x = 0; x < size; x++) {\n      for (let y = 0; y < size; y++) {\n        if (newGrid[x][y].mine) continue;\n        let count = 0;\n        dirs.forEach((dx) => {\n          dirs.forEach((dy) => {\n            if (dx === 0 && dy === 0) return;\n            const nx = x + dx;\n            const ny = y + dy;\n            if (\n              nx >= 0 &&\n              ny >= 0 &&\n              nx < size &&\n              ny < size &&\n              newGrid[nx][ny].mine\n            ) {\n              count++;\n            }\n          });\n        });\n        newGrid[x][y].adjacentMines = count;\n      }\n    }\n\n    setGrid(newGrid);\n  }, [level]);\n\n  const onCellClick = (row, col) => {\n    setGrid((prevGrid) => {\n      const newGrid = prevGrid.map((r) => r.map((c) => ({ ...c })));\n      const clicked = newGrid[row][col];\n      if (clicked.cleared) return newGrid;\n\n      if (clicked.flagged) {\n        clicked.revealed = true;\n        clicked.flagged = false;\n        clicked.cleared = true;\n\n        setQuizOpen(true); // Open quiz window\n        // Reveal numbers around the flagged cell\n        const dirs = [-1, 0, 1];\n        dirs.forEach((dx) => {\n          dirs.forEach((dy) => {\n            if (dx === 0 && dy === 0) return;\n            const nx = row + dx;\n            const ny = col + dy;\n            if (\n              nx >= 0 &&\n              ny >= 0 &&\n              nx < newGrid.length &&\n              ny < newGrid[0].length &&\n              !newGrid[nx][ny].mine\n            ) {\n              newGrid[nx][ny].revealed = true;\n            }\n          });\n        });\n\n        // Activate next flagged mine\n        for (let i = 0; i < newGrid.length; i++) {\n          for (let j = 0; j < newGrid[i].length; j++) {\n            if (\n              newGrid[i][j].mine &&\n              !newGrid[i][j].cleared &&\n              !newGrid[i][j].flagged\n            ) {\n              newGrid[i][j].flagged = true;\n              return newGrid;\n            }\n          }\n        }\n      } else if (!clicked.mine) {\n        clicked.revealed = true;\n      }\n\n      return newGrid;\n    });\n  };\n\n  return (\n    <div className=\"minesweeper\">\n      <p>\n        Level: {level}, Mines: {mineCount}\n      </p>\n      <div className=\"minesweeper-wrapper\">\n        <div\n          className=\"minesweeper-grid\"\n          style={{ gridTemplateColumns: `repeat(${grid.length}, 1fr)` }}\n        >\n          {grid.map((row, rowIndex) => (\n            <div key={rowIndex} className=\"minesweeper-row\">\n              {row.map((cell, colIndex) => (\n                <div\n                  key={`${rowIndex}-${colIndex}`}\n                  className={`minesweeper-cell ${\n                    cell.revealed ? \"revealed\" : \"\"\n                  } ${cell.flagged ? \"flagged\" : \"\"}`}\n                  onClick={() => onCellClick(rowIndex, colIndex)}\n                >\n                  {cell.revealed\n                    ? cell.cleared\n                      ? \"🧪\"\n                      : cell.mine\n                      ? \"💣\"\n                      : cell.adjacentMines > 0\n                      ? cell.adjacentMines\n                      : \"\"\n                    : skippedFlags.includes(`${rowIndex}-${colIndex}`)\n                    ? \"❌\"\n                    : cell.flagged\n                    ? \"🔻\"\n                    : \"\"}\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n      {quizOpen && (\n        <Window title=\"퀴즈\" onClose={() => setQuizOpen(false)}>\n          <p>{quizData[level]?.question}</p>\n          <input\n            type=\"text\"\n            placeholder=\"정답을 입력하세요\"\n            value={quizAnswer}\n            onChange={(e) => setQuizAnswer(e.target.value)}\n          />\n          {showHint && <p className=\"hint\">힌트: {quizData[level]?.hint}</p>}\n          <Buttons onClick={handleSubmitanswer}>제출</Buttons>\n          {wrongAttempts >= 3 && (\n            <Buttons\n              onClick={() => {\n                setQuizOpen(false);\n                setGrid((prevGrid) => {\n                  const newGrid = prevGrid.map((r) => r.map((c) => ({ ...c })));\n                  for (let i = 0; i < newGrid.length; i++) {\n                    for (let j = 0; j < newGrid[i].length; j++) {\n                      const cell = newGrid[i][j];\n                      if (cell.flagged && !cell.cleared) {\n                        cell.revealed = true;\n                        cell.flagged = false;\n                        cell.cleared = true;\n                        setSkippedFlags((prev) => [...prev, `${i}-${j}`]);\n                        return newGrid;\n                      }\n                    }\n                  }\n                  return newGrid;\n                });\n              }}\n            >\n              퀴즈 넘어가기\n            </Buttons>\n          )}\n        </Window>\n      )}\n    </div>\n  );\n}\n\nexport default Minesweeper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}