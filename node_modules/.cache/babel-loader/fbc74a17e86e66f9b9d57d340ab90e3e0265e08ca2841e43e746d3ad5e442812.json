{"ast":null,"code":"var _jsxFileName = \"/Users/maggy/Workspace/bugly-world/src/components/Minesweeper/Minesweeper.js\",\n  _s = $RefreshSig$();\nimport { collection, query, where, getDocs, doc, getDoc } from \"firebase/firestore\";\nimport { db } from \"../../firebase\";\nimport { useEffect, useState } from \"react\";\nimport Window from \"../Window\";\nimport Buttons from \"../Buttons\";\nimport \"./minesweeper.css\";\nimport quizData from \"../../assets/data/quizzes.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Minesweeper({\n  level = 1,\n  onCorrect\n}) {\n  _s();\n  var _quizData$level, _quizData$level2;\n  const [grid, setGrid] = useState([]);\n  const [mineCount, setMineCount] = useState(0);\n  const [quizOpen, setQuizOpen] = useState(false);\n  const [quizAnswer, setQuizAnswer] = useState(\"\");\n  const [wrongAttempts, setWrongAttempts] = useState(0);\n  const [showHint, setShowHint] = useState(false);\n  const [skippedFlags, setSkippedFlags] = useState([]);\n  const handleSubmitanswer = async () => {\n    try {\n      const data = quizData[level];\n      if (data) {\n        const correctAnswer = data.answer;\n        if (quizAnswer.trim() === correctAnswer) {\n          console.log(\"정답!\");\n          onCorrect && onCorrect();\n          setGrid(prevGrid => {\n            const newGrid = prevGrid.map(row => row.map(c => ({\n              ...c\n            })));\n\n            // Reveal only one flagged mine and mark as cleared\n            let found = false;\n            for (let i = 0; i < newGrid.length; i++) {\n              for (let j = 0; j < newGrid[i].length; j++) {\n                if (newGrid[i][j].flagged && !newGrid[i][j].cleared) {\n                  newGrid[i][j].cleared = true;\n                  newGrid[i][j].revealed = true;\n                  newGrid[i][j].flagged = false;\n\n                  // Reveal surrounding numbers around this cleared flagged cell\n                  const dirs = [-1, 0, 1];\n                  dirs.forEach(dx => {\n                    dirs.forEach(dy => {\n                      if (dx === 0 && dy === 0) return;\n                      const nx = i + dx;\n                      const ny = j + dy;\n                      if (nx >= 0 && ny >= 0 && nx < newGrid.length && ny < newGrid[0].length && !newGrid[nx][ny].mine) {\n                        newGrid[nx][ny].revealed = true;\n                      }\n                    });\n                  });\n                  found = true;\n                  break;\n                }\n              }\n              if (found) break;\n            }\n            if (found) {\n              // Continue looking for the next mine to flag AFTER the current flagged mine is cleared\n              for (let i = 0; i < newGrid.length; i++) {\n                for (let j = 0; j < newGrid[i].length; j++) {\n                  if (newGrid[i][j].mine && !newGrid[i][j].cleared && !newGrid[i][j].flagged) {\n                    newGrid[i][j].flagged = true;\n                    break;\n                  }\n                }\n              }\n            }\n            return newGrid;\n          });\n          setQuizOpen(false);\n        } else {\n          setWrongAttempts(prev => {\n            const next = prev + 1;\n            if (next >= 3) setShowHint(true);\n            return next;\n          });\n          alert(\"틀렸습니다!\");\n        }\n      } else {\n        alert(\"문제 데이터를 찾을 수 없습니다.\");\n      }\n    } catch (error) {\n      console.error(\"정답 확인 중 오류:\", error);\n    } finally {\n      setQuizAnswer(\"\");\n    }\n  };\n  useEffect(() => {\n    const size = 5 + level * 2; // grid size increases with level (7 to 13)\n    const mines = level; // mine count equals level for now\n    setMineCount(mines);\n    const newGrid = Array.from({\n      length: size\n    }, () => Array.from({\n      length: size\n    }, () => ({\n      revealed: false,\n      mine: false,\n      flagged: false,\n      cleared: false,\n      adjacentMines: 0\n    })));\n\n    // Place mines randomly with one flagged\n    const allCells = [];\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        allCells.push([i, j]);\n      }\n    }\n    const shuffled = allCells.sort(() => 0.5 - Math.random());\n    for (let i = 0; i < mines; i++) {\n      const [x, y] = shuffled[i];\n      newGrid[x][y].mine = true;\n    }\n\n    // Randomly select one mine to be flagged and reveal surrounding numbers\n    const [fx, fy] = shuffled[Math.floor(Math.random() * mines)];\n    newGrid[fx][fy].flagged = true;\n    const dirs = [-1, 0, 1];\n    dirs.forEach(dx => {\n      dirs.forEach(dy => {\n        if (dx === 0 && dy === 0) return;\n        const nx = fx + dx;\n        const ny = fy + dy;\n        if (nx >= 0 && ny >= 0 && nx < newGrid.length && ny < newGrid[0].length && !newGrid[nx][ny].mine) {\n          newGrid[nx][ny].revealed = true;\n        }\n      });\n    });\n\n    // Calculate adjacent mines\n    const dirs2 = [-1, 0, 1];\n    for (let x = 0; x < size; x++) {\n      for (let y = 0; y < size; y++) {\n        if (newGrid[x][y].mine) continue;\n        let count = 0;\n        dirs2.forEach(dx => {\n          dirs2.forEach(dy => {\n            if (dx === 0 && dy === 0) return;\n            const nx = x + dx;\n            const ny = y + dy;\n            if (nx >= 0 && ny >= 0 && nx < size && ny < size && newGrid[nx][ny].mine) {\n              count++;\n            }\n          });\n        });\n        newGrid[x][y].adjacentMines = count;\n      }\n    }\n    setGrid(newGrid);\n  }, [level]);\n  const onCellClick = (row, col) => {\n    setGrid(prevGrid => {\n      const newGrid = prevGrid.map(r => r.map(c => ({\n        ...c\n      })));\n      const clicked = newGrid[row][col];\n      if (clicked.cleared) return newGrid;\n      if (clicked.flagged && !clicked.cleared) {\n        clicked.revealed = true;\n        clicked.flagged = false;\n        clicked.cleared = true;\n        setQuizOpen(true); // Open quiz window\n\n        // Activate next flagged mine\n        for (let i = 0; i < newGrid.length; i++) {\n          for (let j = 0; j < newGrid[i].length; j++) {\n            if (newGrid[i][j].mine && !newGrid[i][j].cleared && !newGrid[i][j].flagged) {\n              newGrid[i][j].flagged = true;\n              return newGrid;\n            }\n          }\n        }\n      } else if (!clicked.mine) {\n        clicked.revealed = true;\n      }\n      return newGrid;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"minesweeper\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Level: \", level, \", Mines: \", mineCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"minesweeper-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"minesweeper-grid\",\n        style: {\n          gridTemplateColumns: `repeat(${grid.length}, 1fr)`\n        },\n        children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"minesweeper-row\",\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `minesweeper-cell ${cell.revealed ? \"revealed\" : \"\"} ${cell.flagged ? \"flagged\" : \"\"}`,\n            onClick: () => onCellClick(rowIndex, colIndex),\n            children: cell.revealed ? cell.cleared ? \"🧪\" : cell.mine ? \"💣\" : cell.adjacentMines > 0 ? cell.adjacentMines : \"\" : skippedFlags.includes(`${rowIndex}-${colIndex}`) ? \"❌\" : cell.flagged ? \"🔻\" : \"\"\n          }, `${rowIndex}-${colIndex}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), quizOpen && /*#__PURE__*/_jsxDEV(Window, {\n      title: \"\\uD034\\uC988\",\n      onClose: () => setQuizOpen(false),\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: (_quizData$level = quizData[level]) === null || _quizData$level === void 0 ? void 0 : _quizData$level.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"\\uC815\\uB2F5\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n        value: quizAnswer,\n        onChange: e => setQuizAnswer(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this), showHint && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"hint\",\n        children: [\"\\uD78C\\uD2B8: \", (_quizData$level2 = quizData[level]) === null || _quizData$level2 === void 0 ? void 0 : _quizData$level2.hint]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(Buttons, {\n        onClick: handleSubmitanswer,\n        children: \"\\uC81C\\uCD9C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this), wrongAttempts >= 3 && /*#__PURE__*/_jsxDEV(Buttons, {\n        onClick: () => {\n          setQuizOpen(false);\n          setGrid(prevGrid => {\n            const newGrid = prevGrid.map(r => r.map(c => ({\n              ...c\n            })));\n            for (let i = 0; i < newGrid.length; i++) {\n              for (let j = 0; j < newGrid[i].length; j++) {\n                const cell = newGrid[i][j];\n                if (cell.flagged && !cell.cleared) {\n                  cell.revealed = true;\n                  cell.flagged = false;\n                  cell.cleared = true;\n                  setSkippedFlags(prev => [...prev, `${i}-${j}`]);\n                  return newGrid;\n                }\n              }\n            }\n            return newGrid;\n          });\n        },\n        children: \"\\uD034\\uC988 \\uB118\\uC5B4\\uAC00\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n}\n_s(Minesweeper, \"o4Nxn0j0XNt9GyGkewZGjYCYU4I=\");\n_c = Minesweeper;\nexport default Minesweeper;\nvar _c;\n$RefreshReg$(_c, \"Minesweeper\");","map":{"version":3,"names":["collection","query","where","getDocs","doc","getDoc","db","useEffect","useState","Window","Buttons","quizData","jsxDEV","_jsxDEV","Minesweeper","level","onCorrect","_s","_quizData$level","_quizData$level2","grid","setGrid","mineCount","setMineCount","quizOpen","setQuizOpen","quizAnswer","setQuizAnswer","wrongAttempts","setWrongAttempts","showHint","setShowHint","skippedFlags","setSkippedFlags","handleSubmitanswer","data","correctAnswer","answer","trim","console","log","prevGrid","newGrid","map","row","c","found","i","length","j","flagged","cleared","revealed","dirs","forEach","dx","dy","nx","ny","mine","prev","next","alert","error","size","mines","Array","from","adjacentMines","allCells","push","shuffled","sort","Math","random","x","y","fx","fy","floor","dirs2","count","onCellClick","col","r","clicked","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","gridTemplateColumns","rowIndex","cell","colIndex","onClick","includes","title","onClose","question","type","placeholder","value","onChange","e","target","hint","_c","$RefreshReg$"],"sources":["/Users/maggy/Workspace/bugly-world/src/components/Minesweeper/Minesweeper.js"],"sourcesContent":["import {\n  collection,\n  query,\n  where,\n  getDocs,\n  doc,\n  getDoc,\n} from \"firebase/firestore\";\nimport { db } from \"../../firebase\";\nimport { useEffect, useState } from \"react\";\nimport Window from \"../Window\";\nimport Buttons from \"../Buttons\";\nimport \"./minesweeper.css\";\nimport quizData from \"../../assets/data/quizzes.json\";\n\nfunction Minesweeper({ level = 1, onCorrect }) {\n  const [grid, setGrid] = useState([]);\n  const [mineCount, setMineCount] = useState(0);\n  const [quizOpen, setQuizOpen] = useState(false);\n  const [quizAnswer, setQuizAnswer] = useState(\"\");\n  const [wrongAttempts, setWrongAttempts] = useState(0);\n  const [showHint, setShowHint] = useState(false);\n  const [skippedFlags, setSkippedFlags] = useState([]);\n\n  const handleSubmitanswer = async () => {\n    try {\n      const data = quizData[level];\n      if (data) {\n        const correctAnswer = data.answer;\n\n        if (quizAnswer.trim() === correctAnswer) {\n          console.log(\"정답!\");\n          onCorrect && onCorrect();\n\n          setGrid((prevGrid) => {\n            const newGrid = prevGrid.map((row) => row.map((c) => ({ ...c })));\n\n            // Reveal only one flagged mine and mark as cleared\n            let found = false;\n            for (let i = 0; i < newGrid.length; i++) {\n              for (let j = 0; j < newGrid[i].length; j++) {\n                if (newGrid[i][j].flagged && !newGrid[i][j].cleared) {\n                  newGrid[i][j].cleared = true;\n                  newGrid[i][j].revealed = true;\n                  newGrid[i][j].flagged = false;\n\n                  // Reveal surrounding numbers around this cleared flagged cell\n                  const dirs = [-1, 0, 1];\n                  dirs.forEach((dx) => {\n                    dirs.forEach((dy) => {\n                      if (dx === 0 && dy === 0) return;\n                      const nx = i + dx;\n                      const ny = j + dy;\n                      if (\n                        nx >= 0 &&\n                        ny >= 0 &&\n                        nx < newGrid.length &&\n                        ny < newGrid[0].length &&\n                        !newGrid[nx][ny].mine\n                      ) {\n                        newGrid[nx][ny].revealed = true;\n                      }\n                    });\n                  });\n\n                  found = true;\n                  break;\n                }\n              }\n              if (found) break;\n            }\n\n            if (found) {\n              // Continue looking for the next mine to flag AFTER the current flagged mine is cleared\n              for (let i = 0; i < newGrid.length; i++) {\n                for (let j = 0; j < newGrid[i].length; j++) {\n                  if (\n                    newGrid[i][j].mine &&\n                    !newGrid[i][j].cleared &&\n                    !newGrid[i][j].flagged\n                  ) {\n                    newGrid[i][j].flagged = true;\n\n                    break;\n                  }\n                }\n              }\n            }\n\n            return newGrid;\n          });\n\n          setQuizOpen(false);\n        } else {\n          setWrongAttempts((prev) => {\n            const next = prev + 1;\n            if (next >= 3) setShowHint(true);\n            return next;\n          });\n          alert(\"틀렸습니다!\");\n        }\n      } else {\n        alert(\"문제 데이터를 찾을 수 없습니다.\");\n      }\n    } catch (error) {\n      console.error(\"정답 확인 중 오류:\", error);\n    } finally {\n      setQuizAnswer(\"\");\n    }\n  };\n\n  useEffect(() => {\n    const size = 5 + level * 2; // grid size increases with level (7 to 13)\n    const mines = level; // mine count equals level for now\n    setMineCount(mines);\n\n    const newGrid = Array.from({ length: size }, () =>\n      Array.from({ length: size }, () => ({\n        revealed: false,\n        mine: false,\n        flagged: false,\n        cleared: false,\n        adjacentMines: 0,\n      }))\n    );\n\n    // Place mines randomly with one flagged\n    const allCells = [];\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        allCells.push([i, j]);\n      }\n    }\n\n    const shuffled = allCells.sort(() => 0.5 - Math.random());\n    for (let i = 0; i < mines; i++) {\n      const [x, y] = shuffled[i];\n      newGrid[x][y].mine = true;\n    }\n\n    // Randomly select one mine to be flagged and reveal surrounding numbers\n    const [fx, fy] = shuffled[Math.floor(Math.random() * mines)];\n    newGrid[fx][fy].flagged = true;\n    const dirs = [-1, 0, 1];\n    dirs.forEach((dx) => {\n      dirs.forEach((dy) => {\n        if (dx === 0 && dy === 0) return;\n        const nx = fx + dx;\n        const ny = fy + dy;\n        if (\n          nx >= 0 &&\n          ny >= 0 &&\n          nx < newGrid.length &&\n          ny < newGrid[0].length &&\n          !newGrid[nx][ny].mine\n        ) {\n          newGrid[nx][ny].revealed = true;\n        }\n      });\n    });\n\n    // Calculate adjacent mines\n    const dirs2 = [-1, 0, 1];\n    for (let x = 0; x < size; x++) {\n      for (let y = 0; y < size; y++) {\n        if (newGrid[x][y].mine) continue;\n        let count = 0;\n        dirs2.forEach((dx) => {\n          dirs2.forEach((dy) => {\n            if (dx === 0 && dy === 0) return;\n            const nx = x + dx;\n            const ny = y + dy;\n            if (\n              nx >= 0 &&\n              ny >= 0 &&\n              nx < size &&\n              ny < size &&\n              newGrid[nx][ny].mine\n            ) {\n              count++;\n            }\n          });\n        });\n        newGrid[x][y].adjacentMines = count;\n      }\n    }\n\n    setGrid(newGrid);\n  }, [level]);\n\n  const onCellClick = (row, col) => {\n    setGrid((prevGrid) => {\n      const newGrid = prevGrid.map((r) => r.map((c) => ({ ...c })));\n      const clicked = newGrid[row][col];\n      if (clicked.cleared) return newGrid;\n\n      if (clicked.flagged && !clicked.cleared) {\n        clicked.revealed = true;\n        clicked.flagged = false;\n        clicked.cleared = true;\n\n        setQuizOpen(true); // Open quiz window\n\n        // Activate next flagged mine\n        for (let i = 0; i < newGrid.length; i++) {\n          for (let j = 0; j < newGrid[i].length; j++) {\n            if (\n              newGrid[i][j].mine &&\n              !newGrid[i][j].cleared &&\n              !newGrid[i][j].flagged\n            ) {\n              newGrid[i][j].flagged = true;\n              return newGrid;\n            }\n          }\n        }\n      } else if (!clicked.mine) {\n        clicked.revealed = true;\n      }\n\n      return newGrid;\n    });\n  };\n\n  return (\n    <div className=\"minesweeper\">\n      <p>\n        Level: {level}, Mines: {mineCount}\n      </p>\n      <div className=\"minesweeper-wrapper\">\n        <div\n          className=\"minesweeper-grid\"\n          style={{ gridTemplateColumns: `repeat(${grid.length}, 1fr)` }}\n        >\n          {grid.map((row, rowIndex) => (\n            <div key={rowIndex} className=\"minesweeper-row\">\n              {row.map((cell, colIndex) => (\n                <div\n                  key={`${rowIndex}-${colIndex}`}\n                  className={`minesweeper-cell ${\n                    cell.revealed ? \"revealed\" : \"\"\n                  } ${cell.flagged ? \"flagged\" : \"\"}`}\n                  onClick={() => onCellClick(rowIndex, colIndex)}\n                >\n                  {cell.revealed\n                    ? cell.cleared\n                      ? \"🧪\"\n                      : cell.mine\n                      ? \"💣\"\n                      : cell.adjacentMines > 0\n                      ? cell.adjacentMines\n                      : \"\"\n                    : skippedFlags.includes(`${rowIndex}-${colIndex}`)\n                    ? \"❌\"\n                    : cell.flagged\n                    ? \"🔻\"\n                    : \"\"}\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n      {quizOpen && (\n        <Window title=\"퀴즈\" onClose={() => setQuizOpen(false)}>\n          <p>{quizData[level]?.question}</p>\n          <input\n            type=\"text\"\n            placeholder=\"정답을 입력하세요\"\n            value={quizAnswer}\n            onChange={(e) => setQuizAnswer(e.target.value)}\n          />\n          {showHint && <p className=\"hint\">힌트: {quizData[level]?.hint}</p>}\n          <Buttons onClick={handleSubmitanswer}>제출</Buttons>\n          {wrongAttempts >= 3 && (\n            <Buttons\n              onClick={() => {\n                setQuizOpen(false);\n                setGrid((prevGrid) => {\n                  const newGrid = prevGrid.map((r) => r.map((c) => ({ ...c })));\n                  for (let i = 0; i < newGrid.length; i++) {\n                    for (let j = 0; j < newGrid[i].length; j++) {\n                      const cell = newGrid[i][j];\n                      if (cell.flagged && !cell.cleared) {\n                        cell.revealed = true;\n                        cell.flagged = false;\n                        cell.cleared = true;\n                        setSkippedFlags((prev) => [...prev, `${i}-${j}`]);\n                        return newGrid;\n                      }\n                    }\n                  }\n                  return newGrid;\n                });\n              }}\n            >\n              퀴즈 넘어가기\n            </Buttons>\n          )}\n        </Window>\n      )}\n    </div>\n  );\n}\n\nexport default Minesweeper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}