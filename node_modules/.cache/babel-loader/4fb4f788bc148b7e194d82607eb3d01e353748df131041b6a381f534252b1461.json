{"ast":null,"code":"var _jsxFileName = \"/Users/maggy/Workspace/bugly-world/src/components/Minesweeper/Minesweeper.js\",\n  _s = $RefreshSig$();\nimport { collection, query, where, getDocs, doc, getDoc } from \"firebase/firestore\";\nimport { db } from \"../../firebase\";\nimport { useEffect, useState, useRef } from \"react\";\nimport Window from \"../Window\";\nimport Buttons from \"../Buttons\";\nimport \"./minesweeper.css\";\nimport quizData from \"../../assets/data/quizzes.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Minesweeper({\n  level = 1,\n  quizId,\n  // quizId 추가\n  onCorrect,\n  onClose,\n  onSelfClose,\n  onSuccess,\n  solved,\n  skippedCount,\n  setSkippedCount,\n  parentRef\n}) {\n  _s();\n  var _quizData, _quizData2;\n  const mineOrderRef = useRef([]);\n  const [flagIndex, setFlagIndex] = useState(0);\n  const [quizAnswer, setQuizAnswer] = useState(\"\");\n  const [quizOpen, setQuizOpen] = useState(false);\n  const [grid, setGrid] = useState([]);\n  const [mineCount, setMineCount] = useState(0);\n  const [wrongAttempts, setWrongAttempts] = useState(0);\n  const [showHint, setShowHint] = useState(false);\n  const [skippedFlags, setSkippedFlags] = useState([]);\n  const [resetKey, setResetKey] = useState(0);\n  const [gameState, setGameState] = useState(\"angry\"); // \"angry\" or \"cool\"\n  const [skippedThisLevel, setSkippedThisLevel] = useState(false);\n  const handleSubmitanswer = async () => {\n    try {\n      const data = quizData[String(quizId)];\n      if (data && quizAnswer.trim() === data.answer) {\n        setQuizOpen(false);\n        setFlagIndex(i => i + 1);\n        onCorrect && onCorrect();\n        setQuizId(prev => prev + 1); // 다음 퀴즈로 이동\n      } else {\n        setWrongAttempts(prev => prev + 1);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const skipQuiz = () => {\n    setQuizOpen(false);\n    setQuizId(prev => prev + 1); // 퀴즈 스킵 시 다음 퀴즈로 이동\n  };\n  useEffect(() => {\n    const size = level + 2; // grid size increases with level (7 to 13)\n    const mines = level; // mine count equals level for now\n    setMineCount(mines);\n    const newGrid = Array.from({\n      length: size\n    }, () => Array.from({\n      length: size\n    }, () => ({\n      revealed: false,\n      mine: false,\n      flagged: false,\n      cleared: false,\n      adjacentMines: 0\n    })));\n    if (solved) {\n      for (let i = 0; i < size; i++) {\n        for (let j = 0; j < size; j++) {\n          newGrid[i][j].cleared = true;\n          newGrid[i][j].revealed = true;\n        }\n      }\n      setGrid(newGrid);\n      setGameState(\"cool\");\n      return;\n    }\n\n    // Build a fixed random order of mine coords\n    const allCells = [];\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        allCells.push([i, j]);\n      }\n    }\n    const shuffled = allCells.sort(() => 0.5 - Math.random()).slice(0, mines);\n    mineOrderRef.current = shuffled;\n    setFlagIndex(0);\n\n    // Place mines\n    mineOrderRef.current.forEach(([x, y]) => {\n      newGrid[x][y].mine = true;\n    });\n\n    // Calculate adjacent mines\n    const dirs2 = [-1, 0, 1];\n    for (let x = 0; x < size; x++) {\n      for (let y = 0; y < size; y++) {\n        if (newGrid[x][y].mine) continue;\n        let count = 0;\n        dirs2.forEach(dx => {\n          dirs2.forEach(dy => {\n            if (dx === 0 && dy === 0) return;\n            const nx = x + dx;\n            const ny = y + dy;\n            if (nx >= 0 && ny >= 0 && nx < size && ny < size && newGrid[nx][ny].mine) {\n              count++;\n            }\n          });\n        });\n        newGrid[x][y].adjacentMines = count;\n      }\n    }\n\n    // Flag the first mine in order and reveal its neighbors\n    const [fx, fy] = mineOrderRef.current[0];\n    newGrid[fx][fy].flagged = true;\n    const dirs = [-1, 0, 1];\n    dirs.forEach(dx => dirs.forEach(dy => {\n      if (dx || dy) {\n        var _newGrid$nx;\n        const nx = fx + dx,\n          ny = fy + dy;\n        if ((_newGrid$nx = newGrid[nx]) !== null && _newGrid$nx !== void 0 && _newGrid$nx[ny] && !newGrid[nx][ny].mine) {\n          newGrid[nx][ny].revealed = true;\n        }\n      }\n    }));\n    setGrid(newGrid);\n  }, [level, resetKey, solved]);\n  const onCellClick = (row, col) => {\n    setGrid(prevGrid => {\n      const newGrid = prevGrid.map(r => r.map(c => ({\n        ...c\n      })));\n      const clicked = newGrid[row][col];\n      if (clicked.cleared) return newGrid;\n      if (clicked.flagged && !clicked.cleared) {\n        setWrongAttempts(0);\n        setShowHint(false);\n        setQuizOpen(true); // 퀴즈 열기\n      }\n      return newGrid;\n    });\n  };\n  useEffect(() => {\n    setWrongAttempts(0);\n    setShowHint(false);\n  }, []);\n\n  // switch to cool state when all flagged cells have been cleared (🧪)\n  useEffect(() => {\n    if (grid.length === 0) return;\n    const allFlagsCleared = grid.every(row => row.every(cell => {\n      return !cell.flagged || cell.cleared;\n    }));\n    if (allFlagsCleared && !skippedThisLevel && gameState !== \"hmm\") {\n      setGameState(\"cool\");\n      if (!solved && onSuccess) onSuccess();\n    }\n  }, [grid, gameState, skippedThisLevel]);\n  useEffect(() => {\n    console.log(\"Current quizId:\", quizId); // quizId 출력\n  }, [quizId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"minesweeper\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Level: \", level, \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"minesweeper-center-icon\",\n        onClick: () => {\n          if (gameState === \"angry\") {\n            // reset game\n            setResetKey(k => k + 1);\n            setWrongAttempts(0);\n            setShowHint(false);\n          } else if (gameState === \"cool\" || gameState === \"hmm\") {\n            if (onSelfClose) onSelfClose();\n          }\n        },\n        children: gameState === \"angry\" ? \"😡\" : gameState === \"cool\" ? skippedThisLevel ? \"😐\" : \"😎\" : \"😐\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), \" \", \"Mines: \", mineCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"minesweeper-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"minesweeper-grid\",\n        style: {\n          \"--cols\": grid.length\n        },\n        children: grid.map((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `minesweeper-cell \n  ${cell.revealed ? \"revealed\" : \"\"}\n  ${cell.flagged ? \"flagged\" : \"\"}\n  ${cell.revealed && (cell.cleared || cell.adjacentMines > 0) ? \"sunken\" : \"raised\"}`,\n          onClick: () => onCellClick(rowIndex, colIndex),\n          children: cell.revealed ? cell.cleared ? \"🧪\" : cell.mine ? \"💣\" : cell.adjacentMines > 0 ? cell.adjacentMines : \"\" : skippedFlags.includes(`${rowIndex}-${colIndex}`) ? \"❌\" : cell.flagged ? \"\" : \"\"\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 15\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), quizOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: (_quizData = quizData[quizId - 1]) === null || _quizData === void 0 ? void 0 : _quizData.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"\\uC815\\uB2F5\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n        value: quizAnswer,\n        onChange: e => setQuizAnswer(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this), wrongAttempts > 0 && wrongAttempts < 3 && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"red\"\n        },\n        children: \"\\uD2C0\\uB838\\uC2B5\\uB2C8\\uB2E4!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 13\n      }, this), showHint && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"hint\",\n        children: [\"\\uD78C\\uD2B8: \", (_quizData2 = quizData[quizId - 1]) === null || _quizData2 === void 0 ? void 0 : _quizData2.hint]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Buttons, {\n        onClick: handleSubmitanswer,\n        children: \"\\uC81C\\uCD9C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), wrongAttempts >= 3 && /*#__PURE__*/_jsxDEV(Buttons, {\n        onClick: () => {\n          setQuizOpen(false);\n          let didSkip = false;\n          const updatedGrid = grid.map((row, i) => row.map((cell, j) => {\n            if (!didSkip && cell.flagged && !cell.cleared) {\n              didSkip = true;\n              setSkippedFlags(prev => [...prev, `${i}-${j}`]);\n              setGameState(\"hmm\");\n              setSkippedThisLevel(true);\n              quizId += 1; // Increase quizId for the next question\n              if (setSkippedCount) setSkippedCount(prev => prev + 1);\n              return {\n                ...cell,\n                flagged: false,\n                cleared: true,\n                revealed: true\n              };\n            }\n            return cell;\n          }));\n          setGrid(updatedGrid);\n          if (didSkip && typeof onSuccess === \"function\") {\n            onSuccess();\n          }\n        },\n        children: \"\\uD034\\uC988 \\uB118\\uC5B4\\uAC00\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n}\n_s(Minesweeper, \"6Rp2UAf0h2q4IC97sNEVgIFDgsM=\");\n_c = Minesweeper;\nexport default Minesweeper;\nvar _c;\n$RefreshReg$(_c, \"Minesweeper\");","map":{"version":3,"names":["collection","query","where","getDocs","doc","getDoc","db","useEffect","useState","useRef","Window","Buttons","quizData","jsxDEV","_jsxDEV","Minesweeper","level","quizId","onCorrect","onClose","onSelfClose","onSuccess","solved","skippedCount","setSkippedCount","parentRef","_s","_quizData","_quizData2","mineOrderRef","flagIndex","setFlagIndex","quizAnswer","setQuizAnswer","quizOpen","setQuizOpen","grid","setGrid","mineCount","setMineCount","wrongAttempts","setWrongAttempts","showHint","setShowHint","skippedFlags","setSkippedFlags","resetKey","setResetKey","gameState","setGameState","skippedThisLevel","setSkippedThisLevel","handleSubmitanswer","data","String","trim","answer","i","setQuizId","prev","error","console","skipQuiz","size","mines","newGrid","Array","from","length","revealed","mine","flagged","cleared","adjacentMines","j","allCells","push","shuffled","sort","Math","random","slice","current","forEach","x","y","dirs2","count","dx","dy","nx","ny","fx","fy","dirs","_newGrid$nx","onCellClick","row","col","prevGrid","map","r","c","clicked","allFlagsCleared","every","cell","log","className","children","onClick","k","fileName","_jsxFileName","lineNumber","columnNumber","style","rowIndex","colIndex","includes","question","type","placeholder","value","onChange","e","target","color","hint","didSkip","updatedGrid","_c","$RefreshReg$"],"sources":["/Users/maggy/Workspace/bugly-world/src/components/Minesweeper/Minesweeper.js"],"sourcesContent":["import {\n  collection,\n  query,\n  where,\n  getDocs,\n  doc,\n  getDoc,\n} from \"firebase/firestore\";\nimport { db } from \"../../firebase\";\nimport { useEffect, useState, useRef } from \"react\";\nimport Window from \"../Window\";\nimport Buttons from \"../Buttons\";\nimport \"./minesweeper.css\";\nimport quizData from \"../../assets/data/quizzes.json\";\n\nfunction Minesweeper({\n  level = 1,\n  quizId, // quizId 추가\n  onCorrect,\n  onClose,\n  onSelfClose,\n  onSuccess,\n  solved,\n  skippedCount,\n  setSkippedCount,\n  parentRef,\n}) {\n  const mineOrderRef = useRef([]);\n  const [flagIndex, setFlagIndex] = useState(0);\n  const [quizAnswer, setQuizAnswer] = useState(\"\");\n  const [quizOpen, setQuizOpen] = useState(false);\n\n  const [grid, setGrid] = useState([]);\n  const [mineCount, setMineCount] = useState(0);\n  const [wrongAttempts, setWrongAttempts] = useState(0);\n  const [showHint, setShowHint] = useState(false);\n  const [skippedFlags, setSkippedFlags] = useState([]);\n  const [resetKey, setResetKey] = useState(0);\n  const [gameState, setGameState] = useState(\"angry\"); // \"angry\" or \"cool\"\n  const [skippedThisLevel, setSkippedThisLevel] = useState(false);\n\n  const handleSubmitanswer = async () => {\n    try {\n      const data = quizData[String(quizId)];\n      if (data && quizAnswer.trim() === data.answer) {\n        setQuizOpen(false);\n        setFlagIndex((i) => i + 1);\n        onCorrect && onCorrect();\n        setQuizId((prev) => prev + 1); // 다음 퀴즈로 이동\n      } else {\n        setWrongAttempts((prev) => prev + 1);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const skipQuiz = () => {\n    setQuizOpen(false);\n    setQuizId((prev) => prev + 1); // 퀴즈 스킵 시 다음 퀴즈로 이동\n  };\n\n  useEffect(() => {\n    const size = level + 2; // grid size increases with level (7 to 13)\n    const mines = level; // mine count equals level for now\n    setMineCount(mines);\n\n    const newGrid = Array.from({ length: size }, () =>\n      Array.from({ length: size }, () => ({\n        revealed: false,\n        mine: false,\n        flagged: false,\n        cleared: false,\n        adjacentMines: 0,\n      }))\n    );\n\n    if (solved) {\n      for (let i = 0; i < size; i++) {\n        for (let j = 0; j < size; j++) {\n          newGrid[i][j].cleared = true;\n          newGrid[i][j].revealed = true;\n        }\n      }\n      setGrid(newGrid);\n      setGameState(\"cool\");\n      return;\n    }\n\n    // Build a fixed random order of mine coords\n    const allCells = [];\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        allCells.push([i, j]);\n      }\n    }\n    const shuffled = allCells.sort(() => 0.5 - Math.random()).slice(0, mines);\n    mineOrderRef.current = shuffled;\n    setFlagIndex(0);\n\n    // Place mines\n    mineOrderRef.current.forEach(([x, y]) => {\n      newGrid[x][y].mine = true;\n    });\n\n    // Calculate adjacent mines\n    const dirs2 = [-1, 0, 1];\n    for (let x = 0; x < size; x++) {\n      for (let y = 0; y < size; y++) {\n        if (newGrid[x][y].mine) continue;\n        let count = 0;\n        dirs2.forEach((dx) => {\n          dirs2.forEach((dy) => {\n            if (dx === 0 && dy === 0) return;\n            const nx = x + dx;\n            const ny = y + dy;\n            if (\n              nx >= 0 &&\n              ny >= 0 &&\n              nx < size &&\n              ny < size &&\n              newGrid[nx][ny].mine\n            ) {\n              count++;\n            }\n          });\n        });\n        newGrid[x][y].adjacentMines = count;\n      }\n    }\n\n    // Flag the first mine in order and reveal its neighbors\n    const [fx, fy] = mineOrderRef.current[0];\n    newGrid[fx][fy].flagged = true;\n    const dirs = [-1, 0, 1];\n    dirs.forEach((dx) =>\n      dirs.forEach((dy) => {\n        if (dx || dy) {\n          const nx = fx + dx,\n            ny = fy + dy;\n          if (newGrid[nx]?.[ny] && !newGrid[nx][ny].mine) {\n            newGrid[nx][ny].revealed = true;\n          }\n        }\n      })\n    );\n\n    setGrid(newGrid);\n  }, [level, resetKey, solved]);\n\n  const onCellClick = (row, col) => {\n    setGrid((prevGrid) => {\n      const newGrid = prevGrid.map((r) => r.map((c) => ({ ...c })));\n      const clicked = newGrid[row][col];\n      if (clicked.cleared) return newGrid;\n\n      if (clicked.flagged && !clicked.cleared) {\n        setWrongAttempts(0);\n        setShowHint(false);\n        setQuizOpen(true); // 퀴즈 열기\n      }\n      return newGrid;\n    });\n  };\n\n  useEffect(() => {\n    setWrongAttempts(0);\n    setShowHint(false);\n  }, []);\n\n  // switch to cool state when all flagged cells have been cleared (🧪)\n  useEffect(() => {\n    if (grid.length === 0) return;\n    const allFlagsCleared = grid.every((row) =>\n      row.every((cell) => {\n        return !cell.flagged || cell.cleared;\n      })\n    );\n    if (allFlagsCleared && !skippedThisLevel && gameState !== \"hmm\") {\n      setGameState(\"cool\");\n      if (!solved && onSuccess) onSuccess();\n    }\n  }, [grid, gameState, skippedThisLevel]);\n\n  useEffect(() => {\n    console.log(\"Current quizId:\", quizId); // quizId 출력\n  }, [quizId]);\n\n  return (\n    <div className=\"minesweeper\">\n      <p>\n        Level: {level}{\" \"}\n        <div\n          className=\"minesweeper-center-icon\"\n          onClick={() => {\n            if (gameState === \"angry\") {\n              // reset game\n              setResetKey((k) => k + 1);\n              setWrongAttempts(0);\n              setShowHint(false);\n            } else if (gameState === \"cool\" || gameState === \"hmm\") {\n              if (onSelfClose) onSelfClose();\n            }\n          }}\n        >\n          {gameState === \"angry\"\n            ? \"😡\"\n            : gameState === \"cool\"\n            ? skippedThisLevel\n              ? \"😐\"\n              : \"😎\"\n            : \"😐\"}\n        </div>{\" \"}\n        Mines: {mineCount}\n      </p>\n      <div className=\"minesweeper-wrapper\">\n        <div className=\"minesweeper-grid\" style={{ \"--cols\": grid.length }}>\n          {grid.map((row, rowIndex) =>\n            row.map((cell, colIndex) => (\n              <div\n                key={`${rowIndex}-${colIndex}`}\n                className={`minesweeper-cell \n  ${cell.revealed ? \"revealed\" : \"\"}\n  ${cell.flagged ? \"flagged\" : \"\"}\n  ${\n    cell.revealed && (cell.cleared || cell.adjacentMines > 0)\n      ? \"sunken\"\n      : \"raised\"\n  }`}\n                onClick={() => onCellClick(rowIndex, colIndex)}\n              >\n                {cell.revealed\n                  ? cell.cleared\n                    ? \"🧪\"\n                    : cell.mine\n                    ? \"💣\"\n                    : cell.adjacentMines > 0\n                    ? cell.adjacentMines\n                    : \"\"\n                  : skippedFlags.includes(`${rowIndex}-${colIndex}`)\n                  ? \"❌\"\n                  : cell.flagged\n                  ? \"\"\n                  : \"\"}\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n      {quizOpen && (\n        <div>\n          <p>{quizData[quizId - 1]?.question}</p> {/* quizId 기반 질문 */}\n          <input\n            type=\"text\"\n            placeholder=\"정답을 입력하세요\"\n            value={quizAnswer}\n            onChange={(e) => setQuizAnswer(e.target.value)}\n          />\n          {wrongAttempts > 0 && wrongAttempts < 3 && (\n            <p style={{ color: \"red\" }}>틀렸습니다!</p>\n          )}\n          {showHint && (\n            <p className=\"hint\">힌트: {quizData[quizId - 1]?.hint}</p>\n          )}\n          <Buttons onClick={handleSubmitanswer}>제출</Buttons>\n          {wrongAttempts >= 3 && (\n            <Buttons\n              onClick={() => {\n                setQuizOpen(false);\n                let didSkip = false;\n\n                const updatedGrid = grid.map((row, i) =>\n                  row.map((cell, j) => {\n                    if (!didSkip && cell.flagged && !cell.cleared) {\n                      didSkip = true;\n                      setSkippedFlags((prev) => [...prev, `${i}-${j}`]);\n                      setGameState(\"hmm\");\n                      setSkippedThisLevel(true);\n                      quizId += 1; // Increase quizId for the next question\n                      if (setSkippedCount) setSkippedCount((prev) => prev + 1);\n                      return {\n                        ...cell,\n                        flagged: false,\n                        cleared: true,\n                        revealed: true,\n                      };\n                    }\n                    return cell;\n                  })\n                );\n\n                setGrid(updatedGrid);\n\n                if (didSkip && typeof onSuccess === \"function\") {\n                  onSuccess();\n                }\n              }}\n            >\n              퀴즈 넘어가기\n            </Buttons>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Minesweeper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}